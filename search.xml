<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Size and Capacity In Hashmap</title>
      <link href="/2023/02/27/capacity/"/>
      <url>/2023/02/27/capacity/</url>
      
        <content type="html"><![CDATA[<h2 id="Difference-in-Size-and-Capacity-in-Hashmap">Difference in Size and Capacity in Hashmap</h2><hr><h3 id="Size">Size</h3><p>Size in map refers to the number of key-value pairs.</p><hr><h3 id="Capacity">Capacity</h3><p>Capacity in map refers to the number of elements that can be put into map without resizing. (default at 16 if not declared)</p><hr><h3 id="Load-Factor">Load Factor</h3><p>Load factor in map is used as a measure of how occupied the map is, and is also used to determine threshold.</p><hr><h3 id="Threshold">Threshold</h3><p>Threhold is calculated by <code>size*load factor</code>, and stands for the threshold at which resize happens.</p><hr><h3 id="Why-is-it-recommended-to-declare-capacitance-when-the-hashmap-is-initialized">Why is it recommended to declare capacitance when the hashmap is initialized</h3><ul><li><p>Resizing is a very costly operation, because it involves the recreation of the collection container, reassign of the values as well as rehash if hashing is required in the container.</p></li><li><p>Thus it is always recommended to reduce the possibility that resizing happens while minimize the memory taken by the container.</p></li></ul><hr><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> largeNumber <span class="token operator">=</span> <span class="token number">10000000</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> s1 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> largeNumber<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> s2 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Time spent: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>s2 <span class="token operator">-</span> s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>The above code put 10000000 key-value pairs into the hashmap without declaring capacity.</p></blockquote><p>The output is:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Time</span> spent<span class="token operator">:</span> <span class="token number">771</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">int</span> largeNumber <span class="token operator">=</span> <span class="token number">10000000</span><span class="token punctuation">;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token number">10000000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">long</span> s1 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> largeNumber<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">long</span> s2 <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Time spent: "</span> <span class="token operator">+</span> <span class="token punctuation">(</span>s2 <span class="token operator">-</span> s1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>The above code does the same thing but its map is initialized with a capacity that is equal to the number of key-value pairs.</p></blockquote><p>And the output is:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Time</span> spent<span class="token operator">:</span> <span class="token number">521</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><hr><h3 id="What-is-a-recommended-value-for-capacity">What is a recommended value for capacity</h3><ul><li><p>When we use <code>HashMap(int initialCapacity)</code> to initialize the capacity of the container, java did not take load factor into account, and simply initialize the container with the smallest power of 2 that is greater than the input <code>initialCapacity</code>.</p></li><li><p>For example, when we had 14 as the initialCapacity, java will initialize the container with a capacity of 16 with a default load factor of 0.75 and a threshold of 12. In this case, as soon as the 13th element is inserted, the container will be resized.</p></li><li><p>Thus, the initialCapacity is encouraged to be <code>(expectedSize/0.75) + 1</code> to not let resize happen at the expected size. Even though this definitely has inevitably <strong>wasted</strong> some memory, the searching efficiency is maintained as a result of having less number of conflicts during hashing.</p></li></ul><hr><h3 id="Conclusion">Conclusion</h3><blockquote><p>You are encouraged to initialize your collection container with a <code>initialCapacity</code> of <code>(expectedSize/0.75) + 1</code> to maximise performance.</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Volatile</title>
      <link href="/2023/02/24/java-volatile/"/>
      <url>/2023/02/24/java-volatile/</url>
      
        <content type="html"><![CDATA[<h2 id="Volatile">Volatile</h2><hr><blockquote><p>Conclusion: Volatile ensures visibility and ordering, and does not ensure atomicity.</p></blockquote><p>This blog will be focusing on how these principles are ensured by volatile and what they are.</p><hr><h3 id="Java-Memory-Model">Java Memory Model</h3><p><strong>In order to understand what these principles are, we must firstly understand java memory model (JMM)</strong></p><p>Java memory model is the abstraction of how the different cores achieves communication through cache coherency protocol such as <code>MESI</code>, and it exists such that the developers can focus on JMM without trying to figure out how communication is achieved in different processors and operating systems.</p><p>In Java memory model, we have ruled:</p><ol><li><p>Before the thread is unlocked, the thread must stores the values of the shared variables into the main memory.</p></li><li><p>Before the thread is locked, the thread must read the latest value from the main memory into its local cache.</p></li><li><p>The lock used to lock and unlock is the same lock, which means releasing other locks has no effect on the current lock.</p></li></ol><hr><h3 id="Visibility">Visibility</h3><p>Before I explain what visibility is, please have a look at the code below:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>           <span class="token keyword">try</span> <span class="token punctuation">{</span>               <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a = a + 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           a<span class="token operator">++</span><span class="token punctuation">;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finished"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Outside"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This piece of code initialized two threads, where one thread increase the value of a by one, and another thread enters a loop that breaks when a is not equal to 10.</p><hr><blockquote><p>The output of the code is:</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java">starta <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span>finished<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>This output means the loop in the second thread is never breaked, and the value of a that is updated in the first thread is not updated to the second thread, in other words, the value of a is <strong>not visible</strong> to different threads.</p><p>Now look at the same code with volatile keyword:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">volatile</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>       <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>           <span class="token keyword">try</span> <span class="token punctuation">{</span>               <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>               <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token punctuation">}</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"a = a + 1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>           a<span class="token operator">++</span><span class="token punctuation">;</span>           <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"finished"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"start"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Outside"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>Unsuprisingly, the output is:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java">starta <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">1</span>finished<span class="token class-name">Outside</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>This output indicates the updated value of a is <strong>visible</strong> to different threads.</p><p>The visibility ensured by <code>volatile</code> is achieved through inserting <strong>memory barriers</strong> in store buffer and invalidate queue that maintains the performance of its local cpu and reduce the cost communication under MESI protocol.</p><p>In this blog, we will only focus on the concurrency as explained by java memory model.</p><hr><h3 id="Atomicity">Atomicity</h3><p>Again, have a look at the simple code below:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>       a<span class="token operator">++</span><span class="token punctuation">;</span>       <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>Now, we use <code>javac</code> command to compile it into bytecode, and then use <code>javap</code> to decompile it to something that is human-readable.</p><p>The output is:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Compiled</span> from <span class="token string">"Main.java"</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span></span>Main</span> <span class="token punctuation">{</span>  <span class="token keyword">public</span> <span class="token class-name"><span class="token namespace">org<span class="token punctuation">.</span>example<span class="token punctuation">.</span></span>Main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Code</span><span class="token operator">:</span>       <span class="token number">0</span><span class="token operator">:</span> aload_0       <span class="token number">1</span><span class="token operator">:</span> invokespecial #<span class="token number">1</span>                  <span class="token comment">// Method java/lang/Object."&lt;init&gt;":()V</span>       <span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">return</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span></span>String</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Code</span><span class="token operator">:</span>       <span class="token number">0</span><span class="token operator">:</span> getstatic     #<span class="token number">7</span>                  <span class="token comment">// Field a:I</span>       <span class="token number">3</span><span class="token operator">:</span> iconst_1       <span class="token number">4</span><span class="token operator">:</span> iadd       <span class="token number">5</span><span class="token operator">:</span> putstatic     #<span class="token number">7</span>                  <span class="token comment">// Field a:I</span>       <span class="token number">8</span><span class="token operator">:</span> getstatic     #<span class="token number">13</span>                 <span class="token comment">// Field java/lang/System.out:Ljava/io/PrintStream;</span>      <span class="token number">11</span><span class="token operator">:</span> getstatic     #<span class="token number">7</span>                  <span class="token comment">// Field a:I</span>      <span class="token number">14</span><span class="token operator">:</span> invokevirtual #<span class="token number">19</span>                 <span class="token comment">// Method java/io/PrintStream.println:(I)V</span>      <span class="token number">17</span><span class="token operator">:</span> <span class="token keyword">return</span>  <span class="token keyword">static</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token class-name">Code</span><span class="token operator">:</span>       <span class="token number">0</span><span class="token operator">:</span> iconst_0       <span class="token number">1</span><span class="token operator">:</span> putstatic     #<span class="token number">7</span>                  <span class="token comment">// Field a:I</span>       <span class="token number">4</span><span class="token operator">:</span> <span class="token keyword">return</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>Now especially look at this chunk of code:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">0</span><span class="token operator">:</span> getstatic     #<span class="token number">7</span>                  <span class="token comment">// Field a:I</span><span class="token number">3</span><span class="token operator">:</span> iconst_1<span class="token number">4</span><span class="token operator">:</span> iadd<span class="token number">5</span><span class="token operator">:</span> putstatic     #<span class="token number">7</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>getstatic – get a static field value of a class, where the field is identified by field reference in the constant pool index (indexbyte1 &lt;&lt; 8 | indexbyte2)</p></blockquote><blockquote><p>iconst_1 – load the int value 1 onto the stack</p></blockquote><blockquote><p>iadd – add two ints</p></blockquote><blockquote><p>putstatic – set static field to value in a class, where the field is identified by a field reference index in constant pool (indexbyte1 &lt;&lt; 8 | indexbyte2)</p></blockquote><p><a href="https://en.wikipedia.org/wiki/List_of_Java_bytecode_instructions">More info about jvm commands</a></p><p>This demonstrates that, even <code>a++</code> is just one line of code in java, it is actually made of 4 commands in JVM’s perspective, and we say <code>a++</code> is not atomic.</p><p>What happens if atomicity is not perserved?</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> a <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">InterruptedException</span> <span class="token punctuation">{</span>        <span class="token class-name">Thread</span> thread <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                a<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Thread</span> thread1 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10000</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                a<span class="token operator">++</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread1<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        thread<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><blockquote><p>Can we estimate the output? --The answer is no, but we can tell the answer is always less than or equal to 20000.</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token number">17576</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>The reason why this happens is that <code>a++</code> is <strong>not atomic</strong>.</p><p>In JVM’s perspective, we have two separate threads executing:</p><ol><li>Retieving <code>a</code> from constant pool.</li><li>Inserting <code>1</code> into operands stack.</li><li>Add <code>a</code> and <code>1</code>.</li><li>Store the new value of <code>a</code> into constant pool.</li></ol><p>Suppose the first thread is executing 1 before the second thread executes 4, the first thread will read the old value.</p><hr><h3 id="Ordering">Ordering</h3><p>There are 3 types of reordering:</p><ol><li>reordering in JIT</li><li>reordering in CPU</li><li>the reordering like outcome that takes place in concurrent environment due to the delay in communication between cores.</li></ol><p>Volatile perserves ordering by inserting memory barriers and disallowing JIT to reorder the machine code to maximise efficiency.</p><hr><p>The details of memory barriers will be discussed in future posts.</p>]]></content>
      
      
      
        <tags>
            
            <tag> java concurrent </tag>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java Maps</title>
      <link href="/2023/02/23/hashmap-synchronized-map-and-concurrenthashmap/"/>
      <url>/2023/02/23/hashmap-synchronized-map-and-concurrenthashmap/</url>
      
        <content type="html"><![CDATA[<h2 id="Maps">Maps</h2><hr><h3 id="HashMap">HashMap</h3><blockquote><p>In JDK 7 and before: HashMap is implemented using an array and linked lists.</p></blockquote><blockquote><p>In JDK 8 and after: HashMap is implemented using array, linkedlist and red-black tree.</p></blockquote><p>Here, we mainly focus on the implementation of hashmap after JDK 8.</p><p>The data structure of a hashmap are array and linkedList when a hashmap is initialized and empty, when the number of elements reaches a threshold of 8, the implementation is changed from array to red-black tree.</p><p>The advantage of using array is that array requires less space compared to a red-black tree. However, the time-complexity to retrieve a particular element in array requires the program to scan through the whole array which has an average of O(n).</p><p>The advantage of using red-black tree is that the time-complexity in retriving a particular element is O(log(n)).</p><hr><h3 id="Concurrent-HashMap">Concurrent HashMap</h3><p>The concurrent hashmap is safe to use in concurrent environment, because all the update methods are described as synchronized.</p><p>Hashtable is also synchronized, however hashtable class is very old and it’s performance is far worse than concurrent hashmap or synchronized map, furthurmore, the granularity of the synchronized lock in hashtable is much greater than in concurrent hashmap, which has causes unnecessary memory being used.</p><p>The small granularity in concurrent hashmap is achieved through cutting the array into a number of segements (default 16), and assign each segement a separate lock. When a thread obtains the lock on a particular segement, the other segements can be accessed by other threads.</p><p>In concurrent hashmap, read operations are not bounded with locks, and because of the segements, the map object can be modified by multiple threads at the same time without receiving <code>concurrentModificationException</code></p><hr><h3 id="Synchronized-Map">Synchronized Map</h3><p>Synchronized lock is bounded with the whole map object in synchronized lock, and only one thread can update the object at one time, otherwise throw <code>concurrentModificationException</code></p><hr><h3 id="Double-Brace-Syntax">Double-Brace Syntax</h3><p>In these map structures, it is not recommended to use double-brace syntax to initialize the object:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">{</span>        <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"james"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"ethan"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This is because using double-brace syntax actually creates extra anonymous inner class in JVM which requires classloader to load these extra information into metaspace.</p><h3 id="Alternative-Methods-to-Initialize">Alternative Methods to Initialize</h3><p>Many people use double-brace syntax because it is easy and convenient, but below here are some alternatives:</p><p><code>Arrays.asList()</code></p><p><code>Stream.of().collect(Collectors.toList())</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> map </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Do You Understand String</title>
      <link href="/2023/02/22/do-you-understand-string/"/>
      <url>/2023/02/22/do-you-understand-string/</url>
      
        <content type="html"><![CDATA[<h2 id="Do-You-Actually-Understand-String">Do You Actually Understand String</h2><p>Have a look at the code below, if you know what the output is, then probably this blog is useless to you.</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token class-name">String</span> s1 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s2 <span class="token operator">=</span> <span class="token string">"a"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s4 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s5 <span class="token operator">=</span> <span class="token string">"ab"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s6 <span class="token operator">=</span> <span class="token string">"a"</span> <span class="token operator">+</span> <span class="token string">"b"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s7 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> s8 <span class="token operator">=</span> s7<span class="token punctuation">.</span><span class="token function">intern</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s1 <span class="token operator">==</span> s2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s3 <span class="token operator">==</span> s1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s4 <span class="token operator">==</span> s3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s5 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s7 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>s8 <span class="token operator">==</span> s6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr><p>The output is:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token boolean">true</span><span class="token boolean">false</span><span class="token boolean">false</span><span class="token boolean">true</span><span class="token boolean">false</span><span class="token boolean">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Did you get the answer?</p></blockquote><hr><h3 id="Final-String">Final String</h3><p>As we are all awared of, the attributes of String are all described as final, but why?</p><blockquote><p>I would use an immutable whenever I can.    -James Gosling</p></blockquote><p><strong>The importance of string being final:</strong></p><p>String is one of the most common data types we use in any program, so it is essential for jvm to handle this special object separately and uniquely to save the memory in heap.</p><p>Jvm uses the final property of string for cache, this means the same string object could be only created once and all the reference will point to the same object in heap.</p><p>In this case, if string is not declared as final, when there is a change to the string itself, all the references to this string object will receive this change, which is certainly fatal.</p><hr><h3 id="String-Table">String Table</h3><p>String table is a logical component in jvm, and is a part of the runtime constants pool inside metaspace which stores the reference that points to the string objects in heap.</p><p>String table perserves a hashtable structure, thus it’s performance is highly related to the number of buckets and the number of string objects to be inserted, which results in the difference in the length of chain and the probability of collisions.</p><p>All the string constants such as <code>"a"</code> will be inserted into the string table in a lazy manner, and for any declarations of <code>"a"</code> will be assigned with the same duplicated reference address.</p><hr><h3 id="Code-Explanation">Code Explanation:</h3><p>Now look back to the code:</p><h4 id="Cache-Pool">Cache Pool</h4><p><code>"a"</code> will be loaded into string table when <code>String s1 = "a"</code> is executed, and <code>String s2</code> will be given the same duplicated object reference as s1, thus <code>System.out.println(s1 == s2);</code> will output true.</p><p>However, as you have noticed, <code>System.out.println(s3 == s1);</code> gives an output <code>false</code>.</p><p>Is not the object already exists in the string table?</p><blockquote><p>The answer is yes.</p></blockquote><p>This output appears due to the mechanism of how the constructors are executed. To be more precise, the empty constructor will always execute no matter if your constructor has parameters.</p><p>This will create a new object of string based on the value of the string passed in, but worry not, all the attributes of the new string will possess the same duplicated reference as the old string, and this explains why <code>System.out.println(s3 == s1);</code> and <code>System.out.println(s4 == s3);</code> gives an output <code>false</code>.</p><h4 id="Duplicates-and-G1">Duplicates and G1</h4><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Stable</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> value<span class="token punctuation">;</span><span class="token comment">/** * The identifier of the encoding used to encode the bytes in * {@code value}. The supported values in this implementation are * * LATIN1 * UTF16 * * @implNote This field is trusted by the VM, and is a subject to * constant folding if String instance is constant. Overwriting this * field after construction will cause problems. */</span><span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">byte</span> coder<span class="token punctuation">;</span><span class="token comment">/** Cache the hash code for the string */</span><span class="token keyword">private</span> <span class="token keyword">int</span> hash<span class="token punctuation">;</span> <span class="token comment">// Default to 0</span><span class="token annotation punctuation">@IntrinsicCandidate</span><span class="token keyword">public</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token class-name">String</span> original<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> original<span class="token punctuation">.</span>value<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>coder <span class="token operator">=</span> original<span class="token punctuation">.</span>coder<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>hash <span class="token operator">=</span> original<span class="token punctuation">.</span>hash<span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>People who have read the source code of String before may argue that the duplicated strings do not point to the same byte[], because byte is a primitive type and java uses <strong>pass by value</strong> to assign values which is an entire duplicate of itself.</p><p>The above statement is completely correct, however, the default garbage collector <strong>G1</strong> in jvm inserts all new string objects into a queue, and when young gc happens, G1 will check and remove duplicates in the queue concurrently.</p><h4 id="StringBuilder-and-Append">StringBuilder and Append</h4><p>System.out.println(s5 == s6);<code>gives an output true, because any addition between the string constants such as</code>"a" + “b"<code>will directly be compiled into</code>"ab”` during compilation, which in this case, refers to the same string object in string table.</p><p>The execution of <code>String s7 = new String("a") + new String("b");</code> is a little bit complicated, because this statement will create six objects in total if not already exists in string table.</p><p>String object <code>"a"</code>, String object <code>"b"</code> <strong>new</strong> String object <code>"a"</code>, <strong>new</strong> String object <code>"b"</code>, StringBuilder object and **new **String object <code>"ab"</code> produced to <code>toString()</code> method. Because toString works the same way as creating a new String and the plus sign  between <code>new String("a")</code> and <code>"new String("b")"</code> does not invoke the auto conjunction of string (because it is the syntatic sugar for <code>append()</code>), so <code>System.out.println(s7 == s6);</code> will undoubtedly give false.</p><hr><h3 id="intern">intern()</h3><p>The intern method tries to insert the current string into string table, and returns the string object inside the string table.</p><p>In this case, <code>String s8 = s7.intern();</code> will try to insert s7 into string table, however, <code>"ab"</code> already exists in the string table, so this method will return the <code>"ab"</code> object that was inserted into the string table at start.<br>Thus <code>System.out.println(s8 == s6);</code> gives true.</p>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> string </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Thread Local and Memory Leakage</title>
      <link href="/2023/02/22/thread-local-and-memory-leakage/"/>
      <url>/2023/02/22/thread-local-and-memory-leakage/</url>
      
        <content type="html"><![CDATA[<h2 id="ThreadLocal-and-Weak-Reference">ThreadLocal and Weak Reference</h2><hr><h3 id="Intro">Intro</h3><p>Before we move onto the details of threadLocal, we must firstly understand the reference chain between threadLocal and its owner thread.</p><hr><h3 id="Reference-Chain">Reference Chain</h3><p><strong>–&gt; stands for strong reference, and -&gt; stands for weak reference</strong></p><p>Thread --&gt; ThreadLocalMap  --&gt; Entry Pair -&gt; ThreadLocal</p><p>This means, each thread stores a reference to its threadLocalMap which is null when no threadLocal is stored, and each threadLocalMap has a strong reference relationship with its local entry pair that stores ThreadLocal as key and its generic type as value. In addition, each threadLocal is weakly referred by its owner entry pair.</p><hr><h3 id="Code-Example">Code Example</h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">&gt;</span></span> threadLocal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadLocal</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            threadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Integer</span> integer <span class="token operator">=</span> threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>            threadLocal<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            threadLocal<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token number">223</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">Integer</span> integer <span class="token operator">=</span> threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">new</span> <span class="token class-name">Thread</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>            <span class="token class-name">Integer</span> integer <span class="token operator">=</span> threadLocal<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>integer<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span>`````<span class="token class-name">The</span> output in the console is<span class="token operator">:</span>````java<span class="token number">222</span><span class="token keyword">null</span><span class="token number">223</span><span class="token keyword">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The above code has a private static local constant <strong>threadLocal</strong> that is shared among three different threads.</p><p>In the first thread, by invoking <code>threadLocal.set(222); </code>, the entry pair inside the the threadLocalMap in the first thread is given the key <strong>threadLocal object</strong> and value <strong>Integer 222</strong>.</p><p>This means, this entry pair <code>[threadLocal, 222]</code> is independent from other threads and only accessible by its owner thread.</p><br><p>In the second thread, the same <strong>threadLocal Object</strong> is assigned to its local entry pair with the same key as the first thread. However, due to the fact that there is no relationship between the threadLocalMap and entry pairs in the two threads, the integer value <strong>222</strong> is not accessible by the second thread.</p><br><p>This is also well proven by the result given in the third thread when the value is not <strong>reset</strong>. Because there is no entry pair or even threadLocalMap initilized yet and owned by this thread, the result should be null as shown in the console.</p><hr><h3 id="Memory-Leakage">Memory Leakage</h3><p><strong>Conclusion:</strong></p><blockquote><p>The memory leakage in threadLocal has nothing to do with its weak reference, instead, the use of weak reference has reduces the amount of memory leaked if exists.</p></blockquote><p>ThreadLocal is weakly referred by its entry pair, this indicates that threadLocal is cleaned when there is no other strong references pointing to the threadLocal object.</p><p>When threadLocal is cleaned, there will be no key pointing to the respective value in the entry pair, since the value is strongly referred by the entry pair then threadLocalMap and then Thread, the value in the entry pair will not be cleaned as long as the reference of the thread exists.</p><p>This ends up a proportion of memory being used but cannot be accessed, because key is already null.</p><p><strong>Is Weak Reference the Issue?</strong></p><p>Now consider using strong reference to replace the relationship between the entry pair and threadLocal, does the problem of memory leakage still exist?</p><blockquote><p>The answer is YES, and here is why:</p></blockquote><p>If we have no other reference pointing to the threadLocal object other than the strong reference that is from the entry pair, we will not be able to access the threadLocal object anyway, thus leaving the memory used by the threadLocal object uncleaned would only cause more memory to be leaked.</p><p>Even though, with the aid of strong reference, juc could provide us a new method such as <code>keySet()</code> to <strong>pick up</strong> the reference of the keys, but since the reference of the key is already gone, the occasions to use this method is practice is very limited.</p><p><strong>Memory Leakage in Map:</strong></p><p>When using strong reference to replace weak reference in threadLocal, the reference structure in threadLocalMap becomes similar to a common map with keys and values.</p><p>If the program drops the reference to a key object in map, due to the presence of strong reference, the key and value object will not be cleaned as long as the map reference exists. In logical terms, the memory is leaked because some of the keys are on longer needed, but strictly speaking, the program can always pick up the reference of the keys by using <code>keySet()</code>, however, in practice, when the reference of an object is dropped, it is very unlikely to pick it up again using <code>keySet()</code> since it is relatively performance-consuming.</p><hr><h3 id="Thread-Pool">Thread Pool</h3><blockquote><p>Since both map and threadLocalMap have issues regarding memory leakage, why is this issue so heavily brought up in threadLocalMap?</p></blockquote><p>This is because in practice, we often use thread pool which uses the same thread repeatedly, if the issue of memory leakage is not resolved, it might stacks up in the thread resulting a large proportion of memory being inaccessible.</p><hr><h3 id="Fix">Fix</h3><p>Juc have already provided some enhancements regarding this issue, such as detecting for <code>null</code> keys when setting up values, however, it is strongly recommended that we use <code>remove()</code> each time when the entry pair is not needed to end its lifecycle early.</p>]]></content>
      
      
      
        <tags>
            
            <tag> java concurrent </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Four Types of Reference In Java</title>
      <link href="/2023/02/21/the-four-types-of-reference/"/>
      <url>/2023/02/21/the-four-types-of-reference/</url>
      
        <content type="html"><![CDATA[<h1>The Four Types of Reference In Java</h1><br><h2 id="Index">Index:</h2><ol><li>Strong Reference</li><li>Soft Reference</li><li>Weak Reference</li><li>Phantom Reference</li></ol><hr><h3 id="Strong-Reference">Strong Reference:</h3><p> Under normal circumstances, the reference type we use is strong reference.For example:<br></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">org<span class="token punctuation">.</span>example</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">AllArgsConstructor</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">lombok<span class="token punctuation">.</span></span><span class="token class-name">Data</span></span><span class="token punctuation">;</span><span class="token annotation punctuation">@Data</span><span class="token annotation punctuation">@AllArgsConstructor</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token class-name">Person</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"james"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Person</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"ethan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">Person</span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"james"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>        a <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In this case, both person “james” and “ethan” are strongly referred by variable “a” and “b” respectively.<br>This means the two <strong>Person Objects</strong> is never going to be cleaned by gc in any forms, as long as the references of these two objects still exist.</p><p>The output is:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span><span class="token punctuation">(</span>name<span class="token operator">=</span>james<span class="token punctuation">)</span><span class="token keyword">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>This happens because “james” is no longer referred and thus is cleaned by gc.</p><hr><h3 id="Soft-Reference">Soft Reference:</h3><p>Below is an example of soft reference:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"james"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>The objects that are softly referred will be cleaned by gc whenever there is a shortage in memory.</p><hr><h3 id="Weak-Reference">Weak Reference:</h3><p>Below is an example of weak reference:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref<span class="token punctuation">.</span></span><span class="token class-name">SoftReference</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>lang<span class="token punctuation">.</span>ref<span class="token punctuation">.</span></span><span class="token class-name">WeakReference</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"james"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> c <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SoftReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Richard"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">Person</span> b <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"Ethan"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>c<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The output console is:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token class-name">Person</span><span class="token punctuation">(</span>name<span class="token operator">=</span>james<span class="token punctuation">)</span><span class="token class-name">Person</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token class-name">Ethan</span><span class="token punctuation">)</span><span class="token class-name">Person</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token class-name">Richard</span><span class="token punctuation">)</span><span class="token keyword">null</span><span class="token class-name">Person</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token class-name">Ethan</span><span class="token punctuation">)</span><span class="token class-name">Person</span><span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token class-name">Richard</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Weak reference is roughly similar to soft reference, the only difference is that weakly referred objects will be cleaned whenever gc is occured.</p><p>In the example above, <strong>“james”</strong> is weakly referred, <strong>“Ethan”</strong> is Stongly referred and <strong>“Richard”</strong> is softly referred.</p><p>When gc happens, all the weakly referred objects will be cleaned such as “james”.</p><p>Since my program is not short of memory, “Richard” will not be cleaned.</p><p>“Ethan” is strongly referred, so “Ethan” is never going to be cleaned.</p><hr><h3 id="Phantom-Reference">Phantom Reference:</h3><br><p>Phatom reference is always used together with a reference queue:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">{</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token class-name">ReferenceQueue</span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ReferenceQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">PhantomReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Person</span><span class="token punctuation">&gt;</span></span> a <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PhantomReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Person</span><span class="token punctuation">(</span><span class="token string">"james"</span><span class="token punctuation">)</span><span class="token punctuation">,</span> queue<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">gc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The output in console is:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">null</span><span class="token keyword">null</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>This is because get() method in phantom reference always return null:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/**      * Returns this reference object's referent.  Because the referent of a      * phantom reference is always inaccessible, this method always returns      * {@code null}.      *      * @return {@code null}      */</span>     <span class="token keyword">public</span> <span class="token class-name">T</span> <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>         <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>     <span class="token punctuation">}</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>What is phantom reference for:</p><p>DirectByteBuffer is a class in java, and it reads files directly in operating system instead of heap.</p><p>Because this file is not inside of heap, the auto gc in jvm is not able to clean it when this file is not needed.</p><p>In order to not cause memory leakage, this large file is phatomly referred, while the <strong>the phantom reference onject itself</strong> is strongly referred.</p><p>When the <strong>phantom reference object itself</strong> is still referred, it will be placed into the referece queue during gc, and another thread “reference handler” will repeatedly looking for any phantom references inside the queue.</p><p>When phantom reference is detected, the reference handler is going to invoke unsafe.freeMemory() method which is responsible for releasing the memory in the operating system during full gc.</p>]]></content>
      
      
      
        <tags>
            
            <tag> java reference </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
